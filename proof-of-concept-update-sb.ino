#include <FastLED.h>
#include <avr/pgmspace.h>

#define WIDTH 16
#define HEIGHT 16
#define LED_COUNT WIDTH * HEIGHT
#define BRIGHTNESS 5
#define LED_PIN 3
#define COLOR_ORDER GRB
#define CHIPSET WS2811

uint16_t arrow[] = {
  0b00011100,
  0b00111000,
  0b01110000,
  0b11111111,
  0b11111111,
  0b01110000,
  0b00111000,
  0b00011100,
};

CRGB leds[LED_COUNT];

// Generated with https://javl.github.io/image2cpp/
// Make sure to generate with the following settings:
// - Canvas size: 16 x 16 (according to size of led matrix)
// - Background color: black
// - Scaling: stretch to fill canvas
// - Code output format: Arduino code, single bitmap
// - Draw mode: 3 bytes per pixel

const uint32_t youtube [] PROGMEM = {
// 'yt', 16x16px
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ffffff, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ffffff, 0x00ffffff, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ffffff, 0x00ffffff, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ffffff, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
};


const uint32_t google[] PROGMEM = {
// 'g', 16x16px
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00400000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ff0000, 0x00ff0000, 0x00ffff00, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00000000, 
0x00000000, 0x004282f4, 0x004282f4, 0x004282f4, 0x004282f4, 0x004282f4, 0x004282f4, 0x004282f4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00000000, 
0x00000000, 0x004282f4, 0x004282f4, 0x004282f4, 0x004282f4, 0x004282f4, 0x004282f4, 0x004282f4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00000000, 
0x00000000, 0x004282f4, 0x004282f4, 0x004282f4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00000000, 
0x00000000, 0x004282f4, 0x004282f4, 0x004282f4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000f300, 0x00ffff00, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x004282f4, 0x004282f4, 0x004282f4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000f300, 0x0000f300, 0x0000f300, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x004282f4, 0x0000f300, 0x0000f300, 0x00000000, 0x00000000, 0x00000000, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
};


const uint32_t mondrian[] PROGMEM = {
// 'mondrian', 16x16px
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00f4ff00, 0x00f4ff00, 0x00f4ff00, 0x00f4ff00, 0x00000000, 0x001800ff, 0x001800ff, 0x001800ff, 0x001800ff, 0x001800ff, 0x001800ff, 0x001800ff, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00f4ff00, 0x00f4ff00, 0x00f4ff00, 0x00f4ff00, 0x00000000, 0x001800ff, 0x001800ff, 0x001800ff, 0x001800ff, 0x001800ff, 0x001800ff, 0x001800ff, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x001800ff, 0x001800ff, 0x001800ff, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 
0x001800ff, 0x001800ff, 0x001800ff, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 
0x001800ff, 0x001800ff, 0x001800ff, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 
0x001800ff, 0x001800ff, 0x001800ff, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 0x00ea1208, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00f4ff00, 0x00f4ff00, 0x00f4ff00, 0x00f4ff00, 0x00f4ff00, 0x00f4ff00, 0x00f4ff00, 0x00f4ff00, 0x00f4ff00, 0x00f4ff00, 0x00f4ff00, 0x00f4ff00, 
};

const uint32_t andriod[] PROGMEM = {
// 'andriod', 16x16px
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000f300, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000f300, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000f300, 0x00ffffff, 0x0000f300, 0x0000f300, 0x00ffffff, 0x0000f300, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x0000f300, 0x00000000, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x00000000, 0x0000f300, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x0000f300, 0x00000000, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x00000000, 0x0000f300, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x0000f300, 0x00000000, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x00000000, 0x0000f300, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x0000f300, 0x00000000, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x00000000, 0x0000f300, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x0000f300, 0x00000000, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x00000000, 0x0000f300, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x0000f300, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000f300, 0x00000000, 0x00000000, 0x0000f300, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000f300, 0x00000000, 0x00000000, 0x0000f300, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
};




void display_image_progmem(uint8_t* progmem, int startX, int startY, int width, int height) {
  for (int y = 0; y < height; y++) {
    for (int x = 0; x < width; x++) {
      int dx = startX + x;
      int dy = startY + y;

      if (dx < 0 || dy < 0 || dx >= WIDTH || dy >= HEIGHT) {
        continue;
      }

      int i;
      if (dy & 1) {
        // Odd row
        i = dy * WIDTH + (WIDTH - dx - 1);
      }
      else {
        // Even row
        i = dy * WIDTH + dx;
      }

//      uint32_t color = picture[y * width + x];
      uint32_t color = pgm_read_dword(progmem + (y * width + x) * 4);
      leds[i] = CRGB((color >> 16) & 0xFF, (color >> 8) & 0xFF, (color >> 0) & 0xFF);
    }
  }
}

void display_binary_image(uint16_t* picture, int startX, int startY, int width, int height, CRGB color) {
  for (int y = 0; y < height; y++) {
    uint16_t row = picture[y];
    for (int x = 0; x < width; x++) {

      int dx = startX + x;
      int dy = startY + y;


      if (dx < 0 || dy < 0 || dx >= WIDTH || dy >= HEIGHT) {
        continue;
      }

      int i;
      if (dy & 1) {
        // Odd row
        i = dy * WIDTH + (WIDTH - dx - 1);
      }
      else {
        // Even row
        i = dy * WIDTH + dx;
      }

      //      leds[i] = ((row >> x) & 0x1) ? color : CRGB(0, 0, 0);
      if ((row >> x) & 0x1)
        leds[i] = color;
    }
  }
}

void clear_display() {
  for (int i = 0; i < LED_COUNT; i++) {
    leds[i] = CRGB(0, 0, 0);
  }
}

void setup() {
  pinMode(9, INPUT_PULLUP);
  pinMode(10, INPUT_PULLUP);
  pinMode(11, INPUT_PULLUP);
  pinMode(12, INPUT_PULLUP);
  pinMode(13, INPUT_PULLUP);

  Serial.begin(9600);

  FastLED.addLeds<CHIPSET, LED_PIN, COLOR_ORDER>(leds, LED_COUNT);
  FastLED.setBrightness(BRIGHTNESS);

  Serial.println("Starting...\n");
  delay(1000);

  clear_display();
  FastLED.show();

  for (int i = 0; i < LED_COUNT; i++) {
    leds[i] = CRGB(255, 0, 0);
    FastLED.show();
    delay(10);
  }
}
 
uint8_t current_animation = 1;
uint8_t hsvCounter = 0;

void loop() {

  if (digitalRead(9) == 0) {
    current_animation = 0;
  }
  else if (digitalRead(10) == 0) {
    current_animation = 1;
  }
  else if (digitalRead(11) == 0) {
    current_animation = 2;
  }
    else if (digitalRead(12) == 0) {
    current_animation = 3;
  }

    else if (digitalRead(13) == 0) {
    current_animation = 4;
  }

  if (current_animation == 0) {
    clear_display();
    CHSV c = CHSV(hsvCounter * 4, 255, 255);
    display_binary_image(arrow, hsvCounter % 24 - 8, 4, 8, 8, c);
    display_binary_image(arrow, (hsvCounter + 12) % 24 - 8, 4, 8, 8, c);
  }
  else if (current_animation == 1) {
    clear_display();
    display_image_progmem((uint8_t*)youtube, 0, 0, 16, 16);
  }
  else if (current_animation == 2) {
    clear_display();
    display_image_progmem((uint8_t*)google, 0, 0, 16, 16);
    
  }
   else if (current_animation == 3) {
    clear_display();
    display_image_progmem((uint8_t*)mondrian, 0, 0, 16, 16);
  }

  else if (current_animation == 4) {
    clear_display();
    display_image_progmem((uint8_t*)andriod, 0, 0, 16, 16);
  }

  FastLED.show();
  delay(100);
  hsvCounter++;
  
}
